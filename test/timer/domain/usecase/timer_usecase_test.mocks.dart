// Mocks generated by Mockito 5.4.2 from annotations
// in pomodoro_timer/test/timer/domain/usecase/timer_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pomodoro_timer/core/exceptions/failures.dart' as _i4;
import 'package:pomodoro_timer/core/success.dart' as _i8;
import 'package:pomodoro_timer/timer/domain/entity/sound_setting_entity.dart'
    as _i7;
import 'package:pomodoro_timer/timer/domain/entity/timer_setting_entity.dart'
    as _i6;
import 'package:pomodoro_timer/timer/domain/repository/reactive_setting_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ReactiveSettingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockReactiveSettingRepository extends _i1.Mock
    implements _i3.ReactiveSettingRepository {
  @override
  _i2.Either<_i4.Failure, _i5.Stream<_i6.TimerSettingEntity>>
      getTimerStream() => (super.noSuchMethod(
            Invocation.method(
              #getTimerStream,
              [],
            ),
            returnValue:
                _FakeEither_0<_i4.Failure, _i5.Stream<_i6.TimerSettingEntity>>(
              this,
              Invocation.method(
                #getTimerStream,
                [],
              ),
            ),
            returnValueForMissingStub:
                _FakeEither_0<_i4.Failure, _i5.Stream<_i6.TimerSettingEntity>>(
              this,
              Invocation.method(
                #getTimerStream,
                [],
              ),
            ),
          ) as _i2.Either<_i4.Failure, _i5.Stream<_i6.TimerSettingEntity>>);

  @override
  _i2.Either<_i4.Failure, _i5.Stream<_i7.SoundSettingEntity>>
      getSoundStream() => (super.noSuchMethod(
            Invocation.method(
              #getSoundStream,
              [],
            ),
            returnValue:
                _FakeEither_0<_i4.Failure, _i5.Stream<_i7.SoundSettingEntity>>(
              this,
              Invocation.method(
                #getSoundStream,
                [],
              ),
            ),
            returnValueForMissingStub:
                _FakeEither_0<_i4.Failure, _i5.Stream<_i7.SoundSettingEntity>>(
              this,
              Invocation.method(
                #getSoundStream,
                [],
              ),
            ),
          ) as _i2.Either<_i4.Failure, _i5.Stream<_i7.SoundSettingEntity>>);

  @override
  _i5.Future<_i2.Either<_i4.Failure, _i8.Success>> storeTimerSetting({
    int? pomodoroTime,
    int? shortBreak,
    int? longBreak,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeTimerSetting,
          [],
          {
            #pomodoroTime: pomodoroTime,
            #shortBreak: shortBreak,
            #longBreak: longBreak,
          },
        ),
        returnValue: _i5.Future<_i2.Either<_i4.Failure, _i8.Success>>.value(
            _FakeEither_0<_i4.Failure, _i8.Success>(
          this,
          Invocation.method(
            #storeTimerSetting,
            [],
            {
              #pomodoroTime: pomodoroTime,
              #shortBreak: shortBreak,
              #longBreak: longBreak,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i4.Failure, _i8.Success>>.value(
                _FakeEither_0<_i4.Failure, _i8.Success>(
          this,
          Invocation.method(
            #storeTimerSetting,
            [],
            {
              #pomodoroTime: pomodoroTime,
              #shortBreak: shortBreak,
              #longBreak: longBreak,
            },
          ),
        )),
      ) as _i5.Future<_i2.Either<_i4.Failure, _i8.Success>>);

  @override
  _i5.Future<_i2.Either<_i4.Failure, _i8.Success>> storeSoundSetting({
    bool? playSound,
    String? audioPath,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeSoundSetting,
          [],
          {
            #playSound: playSound,
            #audioPath: audioPath,
          },
        ),
        returnValue: _i5.Future<_i2.Either<_i4.Failure, _i8.Success>>.value(
            _FakeEither_0<_i4.Failure, _i8.Success>(
          this,
          Invocation.method(
            #storeSoundSetting,
            [],
            {
              #playSound: playSound,
              #audioPath: audioPath,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i4.Failure, _i8.Success>>.value(
                _FakeEither_0<_i4.Failure, _i8.Success>(
          this,
          Invocation.method(
            #storeSoundSetting,
            [],
            {
              #playSound: playSound,
              #audioPath: audioPath,
            },
          ),
        )),
      ) as _i5.Future<_i2.Either<_i4.Failure, _i8.Success>>);
}
