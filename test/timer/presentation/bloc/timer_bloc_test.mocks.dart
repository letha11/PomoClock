// Mocks generated by Mockito 5.4.0 from annotations
// in pomodoro_timer/test/timer/presentation/bloc/timer_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pomodoro_timer/core/exceptions/failures.dart' as _i5;
import 'package:pomodoro_timer/core/utils/countdown.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_1<T> extends _i1.SmartFake implements _i3.Future<T> {
  _FakeFuture_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Countdown].
///
/// See the documentation for Mockito's code generation for more information.
class MockCountdown extends _i1.Mock implements _i4.Countdown {
  @override
  _i2.Either<_i5.Failure, _i3.Stream<int>> count(int? tick) =>
      (super.noSuchMethod(
        Invocation.method(
          #count,
          [tick],
        ),
        returnValue: _FakeEither_0<_i5.Failure, _i3.Stream<int>>(
          this,
          Invocation.method(
            #count,
            [tick],
          ),
        ),
        returnValueForMissingStub: _FakeEither_0<_i5.Failure, _i3.Stream<int>>(
          this,
          Invocation.method(
            #count,
            [tick],
          ),
        ),
      ) as _i2.Either<_i5.Failure, _i3.Stream<int>>);
}

/// A class which mocks [StreamSubscription].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamSubscription extends _i1.Mock
    implements _i3.StreamSubscription<int> {
  @override
  bool get isPaused => (super.noSuchMethod(
        Invocation.getter(#isPaused),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i3.Future<void> cancel() => (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  void onData(void Function(int)? handleData) => super.noSuchMethod(
        Invocation.method(
          #onData,
          [handleData],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(Function? handleError) => super.noSuchMethod(
        Invocation.method(
          #onError,
          [handleError],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onDone(void Function()? handleDone) => super.noSuchMethod(
        Invocation.method(
          #onDone,
          [handleDone],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void pause([_i3.Future<void>? resumeSignal]) => super.noSuchMethod(
        Invocation.method(
          #pause,
          [resumeSignal],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resume() => super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Future<E> asFuture<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(
          #asFuture,
          [futureValue],
        ),
        returnValue: _FakeFuture_1<E>(
          this,
          Invocation.method(
            #asFuture,
            [futureValue],
          ),
        ),
        returnValueForMissingStub: _FakeFuture_1<E>(
          this,
          Invocation.method(
            #asFuture,
            [futureValue],
          ),
        ),
      ) as _i3.Future<E>);
}
